(()=>{var n,e,t,r,o={536:n=>{var e=/(\d{1,2})\s*:?\s*(\d{0,2})\s*(a\.?m\.?|p\.?m\.?)/i,t=/(\d{1,2})\s*:\s*(\d{1,2})/i;function r(n){return 1===n.length?"0"+n:n}function o(n){return parseInt(n)>=12?"pm":"am"}n.exports=function(n,a){return function(n,t){var o=n.match(e);if(o){var a=o[1],i=o[2]||"00";return t||(t="hh:MM"),"pm"==o[3].replace(/\./g,"").toLowerCase()&&"12"!==a?t.replace("hh",parseInt(a)+12).replace("mm",i).replace("MM",r(i)):t.replace("hh",a).replace("HH",r(a)).replace("mm",i).replace("MM",r(i))}}(n,a)||function(n,e){var a=n.match(t);if(a){var i=a[1],u=a[2];return e||(e="hh:MM a"),parseInt(i)>12?e.replace("hh",parseInt(i)-12).replace("HH",r(i)).replace("mm",u).replace("MM",r(u)).replace("a","pm").replace("A","PM"):e.replace("hh",i).replace("HH",r(i)).replace("mm",u).replace("MM",r(u)).replace("a",o(i)).replace("A",o(i).toUpperCase())}}(n,a)}},426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap);"]),i.push([n.id,':root {\n  --colour-white-primary: #fff;\n  --colour-white-secondary: #bae6fd;\n\n  --colour-black: #0c4a6e;\n\n  --colour-warn-green: hsl(101, 47%, 54%);\n  --colour-warn-yellow: hsl(42, 88%, 65%);\n  --colour-warn-orange: hsl(33, 88%, 52%);\n  --colour-warn-red: hsl(13, 77%, 49%);\n}\n\n/* Utility classes */\n\n.align-items-center {\n  align-items: center;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.gap-m {\n  gap: 30px;\n}\n\n.pad-b-xxs {\n  padding-bottom: 2px;\n}\n\n.pad-b-xs {\n  padding-bottom: 4px;\n}\n\n.pad-b-s {\n  padding-bottom: 20px;\n}\n\n.pad-b-m {\n  padding-bottom: 40px;\n}\n\n.pad-b-l {\n  padding-bottom: 50px;\n}\n\n.pad-l-m {\n  padding-left: 14px;\n}\n\n.text-center {\n  text-align: center;\n}\n\n/* General styles */\n\n* {\n  font-family: "Inter", sans-serif;\n  box-sizing: border-box;\n  color: var(--colour-white-primary);\n  margin: 0;\n  padding: 0;\n\n  transition: border 100ms;\n}\n\nbody {\n  min-height: 100vh;\n  background: linear-gradient(#38bdf8, #075985);\n  padding: 26px 30px;\n}\n\nh4,\nh5 {\n  color: var(--colour-white-secondary);\n}\n\nh1 {\n  font-size: 42px;\n}\n\nh2 {\n  font-size: 30px;\n}\n\nh3 {\n  font-size: 24px;\n}\n\nh4 {\n  font-size: 20px;\n  font-weight: normal;\n}\n\nh5 {\n  font-size: 18px;\n  font-weight: normal;\n}\n\nh6 {\n  font-size: 16px;\n  font-weight: normal;\n  color: var(--colour-white-secondary);\n}\n\nsvg {\n  fill: var(--colour-white-primary);\n}\n\n/* Nav Section */\n\nnav {\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  align-items: center;\n  padding-bottom: 44px;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  font-size: 32px;\n}\n\n.logo > svg {\n  height: 50px;\n  width: 50px;\n  margin-right: 6px;\n  transform: rotate(20deg);\n}\n\n.logo-text > div:nth-child(2) {\n  text-align: right;\n  color: var(--colour-white-secondary);\n  font-size: 20px;\n  margin-top: -6px;\n}\n\nnav input,\nnav button {\n  height: 36px;\n}\n\nnav > form {\n  padding-left: 10px;\n  padding-right: 10px;\n\n  display: flex;\n  gap: 2px;\n  align-items: center;\n\n  background: var(--colour-black);\n  border: 2px solid var(--colour-black);\n  border-radius: 24px;\n}\n\nnav > form:focus-within {\n  border: 2px solid var(--colour-white-primary);\n}\n\nnav > form > input {\n  font-weight: 600;\n  font-size: 18px;\n}\n\nnav > form > button {\n  height: 34px;\n  width: 34px;\n  background: none;\n  border: none;\n}\n\nnav > form > button > svg {\n  height: 24px;\n  width: 24px;\n  margin-bottom: -2px;\n}\n\n#location {\n  background: none;\n  outline: none;\n  border: none;\n}\n\n.buttons {\n  text-align: end;\n}\n\n.buttons > * {\n  background: var(--colour-black);\n  border: 2px solid var(--colour-black);\n  border-radius: 24px;\n  font-weight: 600;\n  padding: 0 20px;\n  margin-left: 8px;\n  font-size: 16px;\n}\n\n.buttons > *.active,\n.buttons > *:hover {\n  border: 2px solid var(--colour-white-primary);\n}\n\n/* Main Section */\n\n.weather {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.main-icon {\n  height: 77px;\n  width: 77px;\n}\n\n.main-temp {\n  font-weight: 600;\n  font-size: 64px;\n  padding-left: 10px;\n}\n\n.current-details {\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  column-gap: 50px;\n  row-gap: 26px;\n}\n\n.current-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2px;\n  text-align: center;\n}\n\n.wind-today {\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n}\n\n.wind-today > svg {\n  width: 30px;\n}\n\n.uv {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 34px;\n  width: 34px;\n  border-radius: 20px;\n}\n\n.moon-icon > svg {\n  fill: var(--colour-white-primary);\n  height: 36px;\n}\n\n.hourly-container {\n  background: #00000065;\n  padding: 30px 20px 10px;\n  border-radius: 20px;\n  margin-bottom: 60px;\n}\n\n.hourly-container > div:not(:last-child) {\n  border-bottom: 2px solid var(--colour-white-secondary);\n}\n\n.hourly-container > div {\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  padding: 3px 0;\n  padding-right: 20px;\n}\n\n.time,\n.hour-temp,\n.hour-desc {\n  font-weight: 600;\n}\n\n.time {\n  width: 50px;\n}\n\n.hour-temp {\n  font-size: 20px;\n}\n\n.hour-desc {\n  width: 160px;\n}\n\n.hour-feels {\n  color: var(--colour-white-secondary);\n}\n\n.hour-icon > img {\n  width: 60px;\n}\n\n.hour-wind-container {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.hour-wind {\n  color: var(--colour-white-secondary);\n}\n\n.hour-wind-desc {\n  font-weight: 600;\n}\n\n.hour-wind-icon {\n  width: 32px;\n}\n\n.loading-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 160px;\n}\n\n.loading-container > svg {\n  width: 80px;\n}\n\n.hidden {\n  display: none;\n}\n\n.error {\n  display: flex;\n  justify-content: center;\n}\n\n.error > div {\n  padding: 8px 16px;\n\n  border-radius: 30px;\n  background: var(--colour-black);\n  font-size: 20px;\n  font-weight: 600;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,4BAA4B;EAC5B,iCAAiC;;EAEjC,uBAAuB;;EAEvB,uCAAuC;EACvC,uCAAuC;EACvC,uCAAuC;EACvC,oCAAoC;AACtC;;AAEA,oBAAoB;;AAEpB;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA,mBAAmB;;AAEnB;EACE,gCAAgC;EAChC,sBAAsB;EACtB,kCAAkC;EAClC,SAAS;EACT,UAAU;;EAEV,wBAAwB;AAC1B;;AAEA;EACE,iBAAiB;EACjB,6CAA6C;EAC7C,kBAAkB;AACpB;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,oCAAoC;AACtC;;AAEA;EACE,iCAAiC;AACnC;;AAEA,gBAAgB;;AAEhB;EACE,aAAa;EACb,mCAAmC;EACnC,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,iBAAiB;EACjB,wBAAwB;AAC1B;;AAEA;EACE,iBAAiB;EACjB,oCAAoC;EACpC,eAAe;EACf,gBAAgB;AAClB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;;EAEnB,aAAa;EACb,QAAQ;EACR,mBAAmB;;EAEnB,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;AACrB;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,eAAe;AACjB;;AAEA;;EAEE,6CAA6C;AAC/C;;AAEA,iBAAiB;;AAEjB;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,QAAQ;EACR,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,iCAAiC;EACjC,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,uBAAuB;EACvB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,sDAAsD;AACxD;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,cAAc;EACd,mBAAmB;AACrB;;AAEA;;;EAGE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;;EAEjB,mBAAmB;EACnB,+BAA+B;EAC/B,eAAe;EACf,gBAAgB;AAClB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap");\n\n:root {\n  --colour-white-primary: #fff;\n  --colour-white-secondary: #bae6fd;\n\n  --colour-black: #0c4a6e;\n\n  --colour-warn-green: hsl(101, 47%, 54%);\n  --colour-warn-yellow: hsl(42, 88%, 65%);\n  --colour-warn-orange: hsl(33, 88%, 52%);\n  --colour-warn-red: hsl(13, 77%, 49%);\n}\n\n/* Utility classes */\n\n.align-items-center {\n  align-items: center;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.gap-m {\n  gap: 30px;\n}\n\n.pad-b-xxs {\n  padding-bottom: 2px;\n}\n\n.pad-b-xs {\n  padding-bottom: 4px;\n}\n\n.pad-b-s {\n  padding-bottom: 20px;\n}\n\n.pad-b-m {\n  padding-bottom: 40px;\n}\n\n.pad-b-l {\n  padding-bottom: 50px;\n}\n\n.pad-l-m {\n  padding-left: 14px;\n}\n\n.text-center {\n  text-align: center;\n}\n\n/* General styles */\n\n* {\n  font-family: "Inter", sans-serif;\n  box-sizing: border-box;\n  color: var(--colour-white-primary);\n  margin: 0;\n  padding: 0;\n\n  transition: border 100ms;\n}\n\nbody {\n  min-height: 100vh;\n  background: linear-gradient(#38bdf8, #075985);\n  padding: 26px 30px;\n}\n\nh4,\nh5 {\n  color: var(--colour-white-secondary);\n}\n\nh1 {\n  font-size: 42px;\n}\n\nh2 {\n  font-size: 30px;\n}\n\nh3 {\n  font-size: 24px;\n}\n\nh4 {\n  font-size: 20px;\n  font-weight: normal;\n}\n\nh5 {\n  font-size: 18px;\n  font-weight: normal;\n}\n\nh6 {\n  font-size: 16px;\n  font-weight: normal;\n  color: var(--colour-white-secondary);\n}\n\nsvg {\n  fill: var(--colour-white-primary);\n}\n\n/* Nav Section */\n\nnav {\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  align-items: center;\n  padding-bottom: 44px;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  font-size: 32px;\n}\n\n.logo > svg {\n  height: 50px;\n  width: 50px;\n  margin-right: 6px;\n  transform: rotate(20deg);\n}\n\n.logo-text > div:nth-child(2) {\n  text-align: right;\n  color: var(--colour-white-secondary);\n  font-size: 20px;\n  margin-top: -6px;\n}\n\nnav input,\nnav button {\n  height: 36px;\n}\n\nnav > form {\n  padding-left: 10px;\n  padding-right: 10px;\n\n  display: flex;\n  gap: 2px;\n  align-items: center;\n\n  background: var(--colour-black);\n  border: 2px solid var(--colour-black);\n  border-radius: 24px;\n}\n\nnav > form:focus-within {\n  border: 2px solid var(--colour-white-primary);\n}\n\nnav > form > input {\n  font-weight: 600;\n  font-size: 18px;\n}\n\nnav > form > button {\n  height: 34px;\n  width: 34px;\n  background: none;\n  border: none;\n}\n\nnav > form > button > svg {\n  height: 24px;\n  width: 24px;\n  margin-bottom: -2px;\n}\n\n#location {\n  background: none;\n  outline: none;\n  border: none;\n}\n\n.buttons {\n  text-align: end;\n}\n\n.buttons > * {\n  background: var(--colour-black);\n  border: 2px solid var(--colour-black);\n  border-radius: 24px;\n  font-weight: 600;\n  padding: 0 20px;\n  margin-left: 8px;\n  font-size: 16px;\n}\n\n.buttons > *.active,\n.buttons > *:hover {\n  border: 2px solid var(--colour-white-primary);\n}\n\n/* Main Section */\n\n.weather {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.main-icon {\n  height: 77px;\n  width: 77px;\n}\n\n.main-temp {\n  font-weight: 600;\n  font-size: 64px;\n  padding-left: 10px;\n}\n\n.current-details {\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  column-gap: 50px;\n  row-gap: 26px;\n}\n\n.current-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2px;\n  text-align: center;\n}\n\n.wind-today {\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n}\n\n.wind-today > svg {\n  width: 30px;\n}\n\n.uv {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 34px;\n  width: 34px;\n  border-radius: 20px;\n}\n\n.moon-icon > svg {\n  fill: var(--colour-white-primary);\n  height: 36px;\n}\n\n.hourly-container {\n  background: #00000065;\n  padding: 30px 20px 10px;\n  border-radius: 20px;\n  margin-bottom: 60px;\n}\n\n.hourly-container > div:not(:last-child) {\n  border-bottom: 2px solid var(--colour-white-secondary);\n}\n\n.hourly-container > div {\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  padding: 3px 0;\n  padding-right: 20px;\n}\n\n.time,\n.hour-temp,\n.hour-desc {\n  font-weight: 600;\n}\n\n.time {\n  width: 50px;\n}\n\n.hour-temp {\n  font-size: 20px;\n}\n\n.hour-desc {\n  width: 160px;\n}\n\n.hour-feels {\n  color: var(--colour-white-secondary);\n}\n\n.hour-icon > img {\n  width: 60px;\n}\n\n.hour-wind-container {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.hour-wind {\n  color: var(--colour-white-secondary);\n}\n\n.hour-wind-desc {\n  font-weight: 600;\n}\n\n.hour-wind-icon {\n  width: 32px;\n}\n\n.loading-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 160px;\n}\n\n.loading-container > svg {\n  width: 80px;\n}\n\n.hidden {\n  display: none;\n}\n\n.error {\n  display: flex;\n  justify-content: center;\n}\n\n.error > div {\n  padding: 8px 16px;\n\n  border-radius: 30px;\n  background: var(--colour-black);\n  font-size: 20px;\n  font-weight: 600;\n}\n'],sourceRoot:""}]);const u=i},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],u=0;u<n.length;u++){var s=n[u],c=r.base?s[0]+r.base:s[0],l=a[c]||0,d="".concat(c," ").concat(l);a[c]=l+1;var A=t(d),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var h=o(m,r);r.byIndex=u,e.splice(u,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var u=t(a[i]);e[u].references--}for(var s=r(n,o),c=0;c<a.length;c++){var l=t(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},17:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke="currentColor"><circle cx="12" cy="12" r="9.5" fill="none" stroke-linecap="round" stroke-width="3"><animate attributeName="stroke-dasharray" calcMode="spline" dur="1.5s" keySplines="0.42,0,0.58,1;0.42,0,0.58,1;0.42,0,0.58,1" keyTimes="0;0.475;0.95;1" repeatCount="indefinite" values="0 150;42 150;42 150;42 150"></animate><animate attributeName="stroke-dashoffset" calcMode="spline" dur="1.5s" keySplines="0.42,0,0.58,1;0.42,0,0.58,1;0.42,0,0.58,1" keyTimes="0;0.475;0.95;1" repeatCount="indefinite" values="0;-16;-59;-59"></animate></circle><animateTransform attributeName="transform" dur="2s" repeatCount="indefinite" type="rotate" values="0 12 12;360 12 12"></animateTransform></g></svg>'},957:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7.03 9.97H11.03V18.89L13.04 18.92V9.97H17.03L12.03 4.97Z"></path></svg>'},534:n=>{n.exports=function(n){var e="<svg xmlns='http://www.w3.org/2000/svg'>"+n+"</svg>",t=(new DOMParser).parseFromString(e,"text/xml").documentElement.firstChild;return document.importNode(t,!0),t}},478:(n,e,t)=>{var r={"./First Quarter.svg":[995,995],"./Full Moon.svg":[669,669],"./Last Quarter.svg":[918,918],"./New Moon.svg":[55,55],"./Spinner.svg":[17],"./Waning Crescent.svg":[665,665],"./Waning Gibbous.svg":[218,218],"./Waxing Crescent.svg":[308,308],"./Waxing Gibbous.svg":[473,473],"./Wind Direction.svg":[957]};function o(n){if(!t.o(r,n))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=r[n],o=e[0];return Promise.all(e.slice(1).map(t.e)).then((()=>t.t(o,23)))}o.keys=()=>Object.keys(r),o.id=478,n.exports=o}},a={};function i(n){var e=a[n];if(void 0!==e)return e.exports;var t=a[n]={id:n,exports:{}};return o[n](t,t.exports,i),t.exports}i.m=o,i.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return i.d(e,{a:e}),e},e=Object.getPrototypeOf?n=>Object.getPrototypeOf(n):n=>n.__proto__,i.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var o=Object.create(null);i.r(o);var a={};n=n||[null,e({}),e([]),e(e)];for(var u=2&r&&t;"object"==typeof u&&!~n.indexOf(u);u=e(u))Object.getOwnPropertyNames(u).forEach((n=>a[n]=()=>t[n]));return a.default=()=>t,i.d(o,a),o},i.d=(n,e)=>{for(var t in e)i.o(e,t)&&!i.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},i.f={},i.e=n=>Promise.all(Object.keys(i.f).reduce(((e,t)=>(i.f[t](n,e),e)),[])),i.u=n=>n+".js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),i.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t={},r="my-webpack-project:",i.l=(n,e,o,a)=>{if(t[n])t[n].push(e);else{var u,s;if(void 0!==o)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var d=c[l];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==r+o){u=d;break}}u||(s=!0,(u=document.createElement("script")).charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.setAttribute("data-webpack",r+o),u.src=n),t[n]=[e];var A=(e,r)=>{u.onerror=u.onload=null,clearTimeout(m);var o=t[n];if(delete t[n],u.parentNode&&u.parentNode.removeChild(u),o&&o.forEach((n=>n(r))),e)return e(r)},m=setTimeout(A.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=A.bind(null,u.onerror),u.onload=A.bind(null,u.onload),s&&document.head.appendChild(u)}},i.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;i.g.importScripts&&(n=i.g.location+"");var e=i.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");if(t.length)for(var r=t.length-1;r>-1&&!n;)n=t[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=n})(),(()=>{var n={179:0};i.f.j=(e,t)=>{var r=i.o(n,e)?n[e]:void 0;if(0!==r)if(r)t.push(r[2]);else{var o=new Promise(((t,o)=>r=n[e]=[t,o]));t.push(r[2]=o);var a=i.p+i.u(e),u=new Error;i.l(a,(t=>{if(i.o(n,e)&&(0!==(r=n[e])&&(n[e]=void 0),r)){var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",u.name="ChunkLoadError",u.type=o,u.request=a,r[1](u)}}),"chunk-"+e,e)}};var e=(e,t)=>{var r,o,[a,u,s]=t,c=0;if(a.some((e=>0!==n[e]))){for(r in u)i.o(u,r)&&(i.m[r]=u[r]);s&&s(i)}for(e&&e(t);c<a.length;c++)o=a[c],i.o(n,o)&&n[o]&&n[o][0](),n[o]=0},t=self.webpackChunkmy_webpack_project=self.webpackChunkmy_webpack_project||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})(),i.nc=void 0,(()=>{"use strict";var n=i(379),e=i.n(n),t=i(795),r=i.n(t),o=i(569),a=i.n(o),u=i(565),s=i.n(u),c=i(216),l=i.n(c),d=i(589),A=i.n(d),m=i(426),h={};function f(n){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},f(n)}function p(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function g(n){p(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===f(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function C(n){p(1,arguments);var e=g(n),t=e.getUTCDay(),r=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function w(n){p(1,arguments);var e=g(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=C(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=C(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}h.styleTagTransform=A(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;var b={};function y(){return b}function E(n,e){var t,r,o,a,i,u,s,c;p(1,arguments);var l=y(),d=v(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=g(n),m=A.getUTCDay(),h=(m<d?7:0)+m-d;return A.setUTCDate(A.getUTCDate()-h),A.setUTCHours(0,0,0,0),A}function x(n,e){var t,r,o,a,i,u,s,c;p(1,arguments);var l=g(n),d=l.getUTCFullYear(),A=y(),m=v(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(d+1,0,m),h.setUTCHours(0,0,0,0);var f=E(h,e),C=new Date(0);C.setUTCFullYear(d,0,m),C.setUTCHours(0,0,0,0);var w=E(C,e);return l.getTime()>=f.getTime()?d+1:l.getTime()>=w.getTime()?d:d-1}function B(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const k=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return B("yy"===e?r%100:r,e.length)},S=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):B(t+1,2)},M=function(n,e){return B(n.getUTCDate(),e.length)},T=function(n,e){return B(n.getUTCHours()%12||12,e.length)},D=function(n,e){return B(n.getUTCHours(),e.length)},q=function(n,e){return B(n.getUTCMinutes(),e.length)},P=function(n,e){return B(n.getUTCSeconds(),e.length)},W=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return B(Math.floor(r*Math.pow(10,t-3)),e.length)};var j={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return k(n,e)},Y:function(n,e,t,r){var o=x(n,r),a=o>0?o:1-o;return"YY"===e?B(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):B(a,e.length)},R:function(n,e){return B(w(n),e.length)},u:function(n,e){return B(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return B(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return B(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return S(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return B(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){p(1,arguments);var t=g(n),r=E(t,e).getTime()-function(n,e){var t,r,o,a,i,u,s,c;p(1,arguments);var l=y(),d=v(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=x(n,e),m=new Date(0);return m.setUTCFullYear(A,0,d),m.setUTCHours(0,0,0,0),E(m,e)}(t,e).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):B(o,e.length)},I:function(n,e,t){var r=function(n){p(1,arguments);var e=g(n),t=C(e).getTime()-function(n){p(1,arguments);var e=w(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),C(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):B(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):M(n,e)},D:function(n,e,t){var r=function(n){p(1,arguments);var e=g(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=t-e.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):B(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return B(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return B(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return B(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return T(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):D(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):B(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):B(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):q(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):P(n,e)},S:function(n,e){return W(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Y(o);case"XXXX":case"XX":return O(o);default:return O(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return Y(o);case"xxxx":case"xx":return O(o);default:return O(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+U(o,":");default:return"GMT"+O(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+U(o,":");default:return"GMT"+O(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return B(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return B((r._originalDate||n).getTime(),e.length)}};function U(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+B(a,2)}function Y(n,e){return n%60==0?(n>0?"-":"+")+B(Math.abs(n)/60,2):O(n,e)}function O(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+B(Math.floor(o/60),2)+t+B(o%60,2)}const z=j;var N=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},L=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const F={p:L,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return N(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",N(o,e)).replace("{{time}}",L(a,e))}};var _=["D","DD"],H=["YY","YYYY"];function $(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Q={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function G(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const I={date:G({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:G({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:G({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var R={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,u=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[u]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const Z={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function J(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,u=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(u))return t}(s):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(u))return t}(s);return i=n.valueCallback?n.valueCallback(c):c,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(u.length)}}}var V,K={ordinalNumber:(V={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(V.matchPattern);if(!t)return null;var r=t[0],o=n.match(V.parsePattern);if(!o)return null;var a=V.valueCallback?V.valueCallback(o[0]):o[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(r.length)}}),era:J({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:J({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:J({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:J({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:J({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const nn={code:"en-US",formatDistance:function(n,e,t){var r,o=Q[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:I,formatRelative:function(n,e,t,r){return R[n]},localize:Z,match:K,options:{weekStartsOn:0,firstWeekContainsDate:1}};var en=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,tn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,rn=/^'([^]*?)'?$/,on=/''/g,an=/[a-zA-Z]/;function un(n,e,t){var r,o,a,i,u,s,c,l,d,A,m,h,C,w,b,E,x,B;p(2,arguments);var k=String(e),S=y(),M=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:S.locale)&&void 0!==r?r:nn,T=v(null!==(a=null!==(i=null!==(u=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==u?u:S.firstWeekContainsDate)&&void 0!==i?i:null===(d=S.locale)||void 0===d||null===(A=d.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=v(null!==(m=null!==(h=null!==(C=null!==(w=null==t?void 0:t.weekStartsOn)&&void 0!==w?w:null==t||null===(b=t.locale)||void 0===b||null===(E=b.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==C?C:S.weekStartsOn)&&void 0!==h?h:null===(x=S.locale)||void 0===x||null===(B=x.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==m?m:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var q=g(n);if(!function(n){if(p(1,arguments),!function(n){return p(1,arguments),n instanceof Date||"object"===f(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=g(n);return!isNaN(Number(e))}(q))throw new RangeError("Invalid time value");var P=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(q),W=function(n,e){return p(2,arguments),function(n,e){p(2,arguments);var t=g(n).getTime(),r=v(e);return new Date(t+r)}(n,-v(e))}(q,P),j={firstWeekContainsDate:T,weekStartsOn:D,locale:M,_originalDate:q};return k.match(tn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,F[e])(n,M.formatLong):n})).join("").match(en).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(rn))?a[1].replace(on,"'"):o;var u,s=z[i];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(u=r,-1===H.indexOf(u))||$(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==_.indexOf(n)}(r)||$(r,e,String(n)),s(W,r,M.localize,j);if(i.match(an))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}var sn=i(534),cn=i.n(sn),ln=i(536),dn=i.n(ln),An=i(957),mn=i.n(An),hn=i(17),fn=i.n(hn);const pn=(()=>{const n=n=>n<1?"Calm":n<4?"Light air":n<8?"Light breeze":n<13?"Gentle breeze":n<19?"Moderate breeze":n<25?"Fresh breeze":n<32?"Strong breeze":n<39?"Moderate wind":n<47?"Gale":n<55?"Strong gale":n<64?"Storm":n<73?"Violent storm":"Hurricane";return{getData:async e=>{const t=await(async n=>{const e=encodeURI(n);return(await fetch(`https://api.weatherapi.com/v1/forecast.json?key=e1252673506548e2b9182745232209&q=${e}`,{mode:"cors"})).json()})(e);if(Object.prototype.hasOwnProperty.call(t,"error"))return{error:t.error.code};const{location:r,current:o,forecast:a}=t;return{location:r.name,country:r.country,date:r.localtime,tempC:Math.floor(o.temp_c),tempF:Math.floor(o.temp_f),feelsLikeC:Math.floor(o.feelslike_c),feelsLikeF:Math.floor(o.feelslike_f),condition:o.condition,windSpeed:Math.floor(o.gust_mph),windDesc:n(o.gust_mph),windDir:o.wind_degree,humidity:o.humidity,uv:o.uv,visibility:o.vis_miles,cloud:o.cloud,precip:Math.round(10*o.precip_mm)/10,sunrise:a.forecastday[0].astro.sunrise,sunset:a.forecastday[0].astro.sunset,moon:a.forecastday[0].astro.moon_phase,hour:a.forecastday[0].hour.map((e=>({tempC:Math.floor(e.temp_c),tempF:Math.floor(e.temp_f),feelsLikeC:Math.floor(e.feelslike_c),feelsLikeF:Math.floor(e.feelslike_f),time:e.time,condition:e.condition,windSpeed:Math.floor(e.gust_mph),windDesc:n(e.gust_mph),windDir:e.wind_degree})))}}}})();let gn,vn=!0;const Cn=(n,e)=>{const t=document.querySelector(`[data-hour='${e}']`),r=un(new Date(n.time),"HH:mm"),o=vn?`${n.tempC}°`:`${n.tempF}°`,a="Feels like "+(vn?`${n.feelsLikeC}°`:`${n.feelsLikeF}°`),i=`${n.windSpeed} mph`,u=cn()(mn());u.style.transform=`rotate(${(n.windDir+180)%360}deg)`,t.querySelector(".time").textContent=r,t.querySelector(".hour-icon>img").src=n.condition.icon,t.querySelector(".hour-temp").textContent=o,t.querySelector(".hour-desc").textContent=n.condition.text,t.querySelector(".hour-feels").textContent=a,t.querySelector(".hour-wind").textContent=i,t.querySelector(".hour-wind-desc").textContent=n.windDesc,t.querySelector(".hour-wind-icon").textContent="",t.querySelector(".hour-wind-icon").appendChild(u)},wn=(n=gn)=>{n!==gn&&(gn=n),(n=>{const e=`${n.location}, ${n.country}`,t=un(new Date(n.date),"eeee dd MMMM u | HH:mm");document.querySelector(".location").textContent=e,document.querySelector(".date").textContent=t})(n),(n=>{const e=vn?`${n.tempC}°C`:`${n.tempF}°F`,t="Feels like "+(vn?`${n.feelsLikeC}°C`:`${n.feelsLikeF}°F`),r=cn()(mn());r.style.transform=`rotate(${(n.windDir+180)%360}deg)`;const o=n.uv<3?"var(--colour-warn-green)":n.uv<6?"var(--colour-warn-yellow)":n.uv<8?"var(--colour-warn-orange)":"var(--colour-warn-red)";document.querySelector(".main-icon").src=n.condition.icon,document.querySelector(".main-temp").textContent=e,document.querySelector(".weather-desc").textContent=n.condition.text,document.querySelector(".feels-like").textContent=t,document.querySelector(".wind-desc").textContent=n.windDesc,document.querySelector(".wind-today").textContent=`${n.windSpeed} mph`,document.querySelector(".wind-today").prepend(r),document.querySelector(".humidity").textContent=`${n.humidity}%`,document.querySelector(".uv").textContent=n.uv,document.querySelector(".uv").style.background=o,document.querySelector(".visibility").textContent=`${n.visibility} mi.`,document.querySelector(".cloudiness").textContent=`${n.cloud}%`,document.querySelector(".precipitation").textContent=`${n.precip} mm`,document.querySelector(".sunrise").textContent=dn()(n.sunrise),document.querySelector(".sunset").textContent=dn()(n.sunset),document.querySelector(".moon-icon").textContent="",document.querySelector(".moon-icon").title=n.moon,i(478)(`./${n.moon}.svg`).then((n=>{document.querySelector(".moon-icon").appendChild(cn()(n.default))}))})(n),n.hour.forEach(Cn)},bn=n=>{const e=document.createElement("div"),t=cn()(fn());e.classList.add("loading-container"),e.appendChild(t),document.querySelector("body").appendChild(e),pn.getData(n).then((n=>{e.remove(),Object.prototype.hasOwnProperty.call(n,"error")?(n=>{document.querySelector(".error")?.remove();const e=document.createElement("div"),t=document.createElement("div");e.classList.add("error"),t.textContent=1006===n?"Location not found":`WeatherAPI Error: Code ${n}`,e.appendChild(t),document.querySelector("body").appendChild(e)})(n.error):(wn(n),document.querySelector(".error")?.remove(),document.querySelector(".weather").classList.toggle("hidden"),document.querySelector("#location").value="")}))},yn=()=>{navigator.geolocation.getCurrentPosition((n=>{const e=`${n.coords.latitude},${n.coords.longitude}`;document.querySelector(".weather").classList.add("hidden"),bn(e)}))},En=document.querySelectorAll('[class^="temp"]');En.forEach((n=>n.addEventListener("click",(n=>{const e=vn;vn=n.currentTarget.classList.contains("temp-c"),e!==vn&&(En.forEach((n=>n.classList.toggle("active"))),wn())})))),document.querySelector(".gps").addEventListener("click",yn),document.querySelector(".submit").addEventListener("click",(async n=>{n.preventDefault();const e=document.querySelector("#location").value;e.length>0&&(document.querySelector(".weather").classList.add("hidden"),bn(e))})),navigator.permissions.query({name:"geolocation"}).then((({state:n})=>{"granted"===n?yn():bn("Glasgow")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,